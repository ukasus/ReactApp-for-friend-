{"ast":null,"code":"// This file replaces `format.js` in bundlers like webpack or Rollup,\n// according to `browser` config in `package.json`.\nmodule.exports = function (random, alphabet, size) {\n  // We can’t use bytes bigger than the alphabet. To make bytes values closer\n  // to the alphabet, we apply bitmask on them. We look for the closest\n  // `2 ** x - 1` number, which will be bigger than alphabet size. If we have\n  // 30 symbols in the alphabet, we will take 31 (00011111).\n  // We do not use faster Math.clz32, because it is not available in browsers.\n  var mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1; // Bitmask is not a perfect solution (in our example it will pass 31 bytes,\n  // which is bigger than the alphabet). As a result, we will need more bytes,\n  // than ID size, because we will refuse bytes bigger than the alphabet.\n  // Every hardware random generator call is costly,\n  // because we need to wait for entropy collection. This is why often it will\n  // be faster to ask for few extra bytes in advance, to avoid additional calls.\n  // Here we calculate how many random bytes should we call in advance.\n  // It depends on ID length, mask / alphabet size and magic number 1.6\n  // (which was selected according benchmarks).\n  // -~f => Math.ceil(f) if n is float number\n  // -~i => i + 1 if n is integer number\n\n  var step = -~(1.6 * mask * size / alphabet.length);\n  var id = '';\n\n  while (true) {\n    var bytes = random(step); // Compact alternative for `for (var i = 0; i < step; i++)`\n\n    var i = step;\n\n    while (i--) {\n      // If random byte is bigger than alphabet even after bitmask,\n      // we refuse it by `|| ''`.\n      id += alphabet[bytes[i] & mask] || ''; // More compact than `id.length + 1 === size`\n\n      if (id.length === +size) return id;\n    }\n  }\n};","map":{"version":3,"sources":["/media/ukasus/Hd World/reactProject/v2/node_modules/nanoid/format.browser.js"],"names":["module","exports","random","alphabet","size","mask","Math","log","length","LN2","step","id","bytes","i"],"mappings":"AAAA;AACA;AAEAA,MAAM,CAACC,OAAP,GAAiB,UAAUC,MAAV,EAAkBC,QAAlB,EAA4BC,IAA5B,EAAkC;AACjD;AACA;AACA;AACA;AACA;AACA,MAAIC,IAAI,GAAG,CAAC,KAAKC,IAAI,CAACC,GAAL,CAASJ,QAAQ,CAACK,MAAT,GAAkB,CAA3B,IAAgCF,IAAI,CAACG,GAA3C,IAAkD,CAA7D,CANiD,CAOjD;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;;AACA,MAAIC,IAAI,GAAG,CAAC,EAAE,MAAML,IAAN,GAAaD,IAAb,GAAoBD,QAAQ,CAACK,MAA/B,CAAZ;AACA,MAAIG,EAAE,GAAG,EAAT;;AAEA,SAAO,IAAP,EAAa;AACX,QAAIC,KAAK,GAAGV,MAAM,CAACQ,IAAD,CAAlB,CADW,CAEX;;AACA,QAAIG,CAAC,GAAGH,IAAR;;AACA,WAAOG,CAAC,EAAR,EAAY;AACV;AACA;AACAF,MAAAA,EAAE,IAAIR,QAAQ,CAACS,KAAK,CAACC,CAAD,CAAL,GAAWR,IAAZ,CAAR,IAA6B,EAAnC,CAHU,CAIV;;AACA,UAAIM,EAAE,CAACH,MAAH,KAAc,CAACJ,IAAnB,EAAyB,OAAOO,EAAP;AAC1B;AACF;AACF,CApCD","sourcesContent":["// This file replaces `format.js` in bundlers like webpack or Rollup,\n// according to `browser` config in `package.json`.\n\nmodule.exports = function (random, alphabet, size) {\n  // We can’t use bytes bigger than the alphabet. To make bytes values closer\n  // to the alphabet, we apply bitmask on them. We look for the closest\n  // `2 ** x - 1` number, which will be bigger than alphabet size. If we have\n  // 30 symbols in the alphabet, we will take 31 (00011111).\n  // We do not use faster Math.clz32, because it is not available in browsers.\n  var mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1\n  // Bitmask is not a perfect solution (in our example it will pass 31 bytes,\n  // which is bigger than the alphabet). As a result, we will need more bytes,\n  // than ID size, because we will refuse bytes bigger than the alphabet.\n\n  // Every hardware random generator call is costly,\n  // because we need to wait for entropy collection. This is why often it will\n  // be faster to ask for few extra bytes in advance, to avoid additional calls.\n\n  // Here we calculate how many random bytes should we call in advance.\n  // It depends on ID length, mask / alphabet size and magic number 1.6\n  // (which was selected according benchmarks).\n\n  // -~f => Math.ceil(f) if n is float number\n  // -~i => i + 1 if n is integer number\n  var step = -~(1.6 * mask * size / alphabet.length)\n  var id = ''\n\n  while (true) {\n    var bytes = random(step)\n    // Compact alternative for `for (var i = 0; i < step; i++)`\n    var i = step\n    while (i--) {\n      // If random byte is bigger than alphabet even after bitmask,\n      // we refuse it by `|| ''`.\n      id += alphabet[bytes[i] & mask] || ''\n      // More compact than `id.length + 1 === size`\n      if (id.length === +size) return id\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}